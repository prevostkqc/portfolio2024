( function($) {
	
	//RZ--> gère l'affichage, la soumission et la restitution d'une zone de notation.
	//
	// STRUCTURE :
	//
	//  	<div data-notable-url="url_qui_enregistrera_la_note" data-notable-note-max="note_max_du_systheme_de_notation" data-notable-note="note_a_afficher">
	// 			<div class="background_note"></div>
	//			<div class="affichage_note"></div>
	//		</div>
	//
	//  Deux paramètres peuvent être ajoutés
	//  	data-notable-click : Le mettre à "off" si on ne veut pas envoyer de note
	//  	data-notable-over : Le mettre à "off" si on ne veut pas de over sur la zone
	//
	//
	//

	$.Notable = function(container, options) {

		//--> Attache à plugin tout ce qui doit être accessible via $container.data('Notable')
		var plugin = this,
		$container = $(container),

		//--> Valeurs par défaut
		defaults = {
			// number		: 5
		},

		// =============================================================
		//--> Instances de variables internes au plugin, non disponibles via l'object Notable général
		container_width,
		width_one_note,

		// =============================================================
		//--> Variable facilitant l'utilisation des settings du plugin
		settings;

		// =============================================================
		// Functions disponibles via l'objet Notable
		// =============================================================

		plugin.init = function() {
			//--> Merge les options par défaut et celles spécifiées pour ce plugin
			plugin.settings = settings = $.extend({}, defaults, options);
			//--> Ajoute l'attribut HTML 5 data-Notable pour faciliter l'appel des instances Notable avec les pseudo-selector CSS 
			$container.attr('data-Notable', true);

			container_width = $container.width();
			width_one_note = container_width/_data('note-max');

			// =============================================================
			//--> Code d'initialisation du plugin
			if (_data('click') != 'off') {
				$container.on('click touchstart', function(event){
					event.preventDefault();
					plugin.send_note(event);
				});
			};

			if (_data('over') != 'off') {
				$container.on('mousemove', function(event){
					event.preventDefault();
					plugin.over_note(event);
				});

				$container.on('mouseleave', function(event){
					event.preventDefault();
					plugin.set_note();
					$('.label_note span').hide();
				});
			}

			plugin.set_note();
			plugin.set_nbr_notes();

		};

		plugin.send_note = function(event){
			if (event.originalEvent.type == 'click') {
				px = event.pageX;
			} else{
				px = event.originalEvent.touches[0].pageX;
			};
			
			offX = px-$container.offset().left;
			note = Math.ceil(offX/width_one_note);

			$.ajax({
				url: _data('url')+'/'+note,
				dataType: 'json'
			}).done(function(data){
				if (data.note) {
					_set_data('note', data.note);
					_set_data('nbr-notes', data.nbr_notes);
					plugin.set_note();
					plugin.set_nbr_notes();

					if (_data('confirmation') != undefined) {
						var box = $('<div class="modale"><h2 class="titre-section">'+_data('confirmation')+'</h2><a href="#" class="fermeture">Fermer</a></div>');
						$.fancybox.open(
							box,
							{
								padding		: 0,
								margin		: 15,
								maxWidth	: 680,
								arrows		: false,
								closeBtn	: false,
								helpers:  {
									title:  null
								}
							}
						);
					};

					fire('note_send', data);
				};
			});
		};

		plugin.set_note = function(note){
			if (note == undefined) {
				note = _data('note');
			};

			note = Math.round(note*100)/100;


			width_note = ((note*width_one_note)/container_width)*100;
			$container.html('<span class="active affichage_note" style="width: 70%;"></span>');
			$container.find('.affichage_note').width(width_note+'%');
		}

		plugin.set_nbr_notes= function(nbr){
			if (nbr == undefined) {
				nbr = _data('nbr-notes');
			};
			$container.parent().find('.nbr_notes').html(nbr);
		}

		plugin.over_note = function(event){
			offX = event.pageX-$container.offset().left;
			note = Math.ceil(offX/width_one_note);
			$('.label_note span').hide();
			$('.label_note span[rel='+note+']').show();
			plugin.set_note(note);
		}

		// =============================================================
		// Functions privée
		// =============================================================

		// Triggers an event on an element and returns the event result
		var fire = function(name, data) {
			$container.trigger(name, data);
		}

		var _log = function(_var){
			console.log('Notable - ' + _var);
		}

		var response = function(val){
			$container.data('Notable_response', val);
		}

		var _data = function(data){
			return $container.data(('Notable-'+data).toLowerCase());
		}

		var _set_data = function(data, value){
			return $container.data(('Notable-'+data).toLowerCase(), value);
		}

		//--> Exécution de l'initialisation du plugin
		plugin.init();

	};

	$.fn.Notable = function(options) {
		var args		= arguments;
		var response	= 'no_response';
		return this.each(function() {
			var plugin = $(this).data('Notable');
			if (undefined === plugin) {
				plugin = new $.Notable(this, options);
				$(this).data('Notable', plugin);
				$(this).data('Notable_response', 'no_response');
			}else if ( plugin[options] ) {
				var exec = plugin[options].apply( this, Array.prototype.slice.call( args, 1 ));
				if($(this).data('Notable_response') != 'no_response'){
					response = $(this).data('Notable_response');
					$(this).data('Notable_response', 'no_response');
					return response;
				}else{
					return exec;
				}
			}
		});
		if(response != 'no_response'){
			return response;
		}else{
			return this;
		}
	};

})(jQuery);

$(function(){
	$('[data-notable-url]').Notable();
})
